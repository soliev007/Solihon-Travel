import logging
import json
import re
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Telegram —Ç–æ–∫–µ–Ω (–∏“∑–æ–∑–∞—Ç–∏ —Ö—É–¥—Ä–æ –≥—É–∑–æ—Ä)
TOKEN = "BOT_TOKEN"

# Travelpayouts cities.json URL
CITIES_URL = "https://api.travelpayouts.com/data/ru/cities.json"

# –°–∞–±—Ç–∏ —á–∏–ø—Ç–∞“≥–æ –±–∞—Ä–æ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–±–∞—Ä–∞–Ω–¥–∞
USER_TICKETS = {}

# –ó–∞–±–æ–Ω“≥–æ
MESSAGES = {
    "en": {
        "welcome": "‚úàÔ∏è Welcome to *SolihonTravelBot!*\nPlease choose a language:",
        "ask_route": "Please send your route and date like this:\n`Yekaterinburg - Dushanbe 20.08.2025`",
        "invalid_format": "‚ùå Invalid format. Please use:\n`City1 - City2 DD.MM.YYYY`",
        "no_ticket": "You don‚Äôt have any tickets yet.",
        "thank_you": "‚úÖ Thank you for your purchase!",
        "your_ticket": "üé´ Your ticket:\n",
        "help": "Send your route like: *Moscow - Dubai 25.08.2025*\nUse /myticket to see your ticket."
    },
    "ru": {
        "welcome": "‚úàÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *SolihonTravelBot!*\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "ask_route": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞—Ä—à—Ä—É—Ç –∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ - –î—É—à–∞–Ω–±–µ 20.08.2025`",
        "invalid_format": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n`–ì–æ—Ä–æ–¥1 - –ì–æ—Ä–æ–¥2 –î–î.–ú–ú.–ì–ì–ì–ì`",
        "no_ticket": "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤.",
        "thank_you": "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
        "your_ticket": "üé´ –í–∞—à –±–∏–ª–µ—Ç:\n",
        "help": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞—Ä—à—Ä—É—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: *–ú–æ—Å–∫–≤–∞ - –î—É–±–∞–π 25.08.2025*\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /myticket, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –±–∏–ª–µ—Ç."
    }
}

def load_city_names():
    try:
        response = requests.get(CITIES_URL)
        response.raise_for_status()
        data = response.json()
        return {item["code"]: item["name_translations"]["ru"] for item in data}
    except Exception as e:
        logger.error("Failed to load city names: %s", e)
        return {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [InlineKeyboardButton("üá¨üáß English", callback_data="lang_en")]
    ]
    await update.message.reply_text("‚úàÔ∏è Welcome / –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", reply_markup=InlineKeyboardMarkup(keyboard))

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.callback_query.data.split("_")[1]
    context.user_data["lang"] = lang
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(MESSAGES[lang]["ask_route"])

async def handle_route(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    text = update.message.text.strip()
    if not re.match(r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s\-]{4,} - [A-Za-z–ê-–Ø–∞-—è–Å—ë\s\-]{4,} \d{2}\.\d{2}\.\d{4}$", text):
        await update.message.reply_text(MESSAGES[lang]["invalid_format"], parse_mode="Markdown")
        return

    with open("flights.json", "r", encoding="utf-8") as f:
        flight_data = json.load(f)

    city_names = load_city_names()

    for flight in flight_data:
        from_city = city_names.get(flight["from"], flight["from"])
        to_city = city_names.get(flight["to"], flight["to"])
        msg = (
            f"üõ´ {from_city} ‚Üí {to_city}\n"
            f"‚úà {flight['airline']}\n"
            f"üõ© {flight['flight_number']} ({flight['aircraft']})\n"
            f"üìç {flight['stopovers']}\n"
            f"üí≤ {flight['price']}\n"
            f"Available via:"
        )
        buttons = [
            [InlineKeyboardButton(agent["name"], callback_data=f"buy_{agent['name']}_{flight['flight_number']}")]
            for agent in flight["agencies"]
        ]
        await update.message.reply_text(msg, reply_markup=InlineKeyboardMarkup(buttons))

async def handle_buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    data = update.callback_query.data.split("_")
    agent = data[1]
    flight_num = data[2]

    # –°—Å—ã–ª–∫–∞ –±–æ –º–∞—Ä–∫–µ—Ä
    link = f"https://yourtravel.site/buy?marker=123456&flight={flight_num}&agent={agent}"
    USER_TICKETS[update.effective_user.id] = f"{flight_num} via {agent}"

    await update.callback_query.answer()
    await update.callback_query.edit_message_text(f"üîó [Click here to buy]({link})", parse_mode="Markdown")
    await update.callback_query.message.reply_text(MESSAGES[lang]["thank_you"])

async def myticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    uid = update.effective_user.id
    if uid in USER_TICKETS:
        ticket = USER_TICKETS[uid]
        await update.message.reply_text(MESSAGES[lang]["your_ticket"] + ticket)
    else:
        await update.message.reply_text(MESSAGES[lang]["no_ticket"])

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "en")
    await update.message.reply_text(MESSAGES[lang]["help"])

def main():
    app = Application.builder().token(TOKEN).build()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ (—Å–∏–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–ø—Ä–∞–≤–∞ –≤ Telegram)
    commands = [
        BotCommand("start", "Start the bot / –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("myticket", "Show your ticket / –ü–æ–∫–∞–∑–∞—Ç—å –±–∏–ª–µ—Ç"),
        BotCommand("help", "Help and info / –ü–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    ]
    app.bot.set_my_commands(commands)

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(set_language, pattern="^lang_"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_route))
    app.add_handler(CallbackQueryHandler(handle_buy, pattern="^buy_"))
    app.add_handler(CommandHandler("myticket", myticket))
    app.add_handler(CommandHandler("help", help_command))

    app.run_polling()

if __name__ == "__main__":
    main()
